// Generated by CoffeeScript 1.6.2
/*
# API for Haikus
*/


(function() {
  var Counters, Haikus, Ips, mongoose, typicalOutputMethod, _;

  _ = require("lodash");

  mongoose = require('mongoose');

  Haikus = mongoose.model('haiku');

  Ips = mongoose.model('ip');

  Counters = mongoose.model('counter');

  typicalOutputMethod = function(res, errorCode) {
    return function(err, theObject) {
      if (!err) {
        if (_.isUndefined(theObject) || _.isNull(theObject)) {
          console.log("404");
          return res.send(404);
        } else {
          return res.send(theObject);
        }
      } else {
        console.log(err);
        if (!_.isUndefined(errorCode)) {
          return res.send(errorCode);
        } else {
          return res.send(500);
        }
      }
    };
  };

  exports.get = function(req, res) {
    console.log(new Date().toISOString() + " GET /haikus");
    return Haikus.find(typicalOutputMethod(res));
  };

  exports.getSingle = function(req, res) {
    var id;

    id = req.params.id;
    console.log(new Date().toISOString() + " GET /haikus/" + id);
    return Haikus.findOne({
      _id: id
    }, typicalOutputMethod(res));
  };

  exports.getRandom = function(req, res) {
    return Counters.findOne({
      name: "haikus"
    }, function(err, counter) {
      var randomIndex;

      randomIndex = Math.floor(Math.random() * counter.count);
      return Haikus.find().limit(-1).skip(randomIndex).exec(typicalOutputMethod(res));
    });
  };

  exports.post = function(req, res) {
    var newHaiku;

    console.log(new Date().toISOString() + " POST /haikus");
    console.log(JSON.stringify(req.body));
    newHaiku = new Haikus({
      author: req.body.author,
      text: req.body.text,
      createdByIp: req.ip,
      likes: 0
    });
    return newHaiku.save(function(err) {
      if (!err) {
        console.log("created new haiku");
        res.send(newHaiku);
        return Counters.update({
          name: "haikus"
        }, {
          $inc: {
            count: 1
          }
        }).exec();
      } else {
        console.log(err);
        return res.send(400);
      }
    });
  };

  exports.deleteSingle = function(req, res) {
    var id;

    id = req.params.id;
    console.log(new Date().toISOString() + " DELETE /haikus/" + id);
    return Haikus.remove({
      "_id": id
    }, function(err) {
      if (!err) {
        console.log("deleted " + id);
        return res.send(200);
      } else {
        console.log(err);
        return res.send(500);
      }
    });
  };

  exports.likeSingle = function(req, res) {
    var id;

    id = req.params.id;
    console.log(new Date().toISOString() + " GET /haikus/" + id + "/like");
    return Ips.findOne({
      ip: req.ip
    }, function(err, ip) {
      if (err || _.isNull(ip)) {
        ip = new Ips({
          ip: req.ip,
          likes: []
        });
      }
      if (_.contains(ip.likes, id)) {
        console.log("Already liked...");
        return res.send(202);
      }
      return Haikus.update({
        _id: id
      }, {
        $inc: {
          likes: 1
        }
      }).exec(function(err, haiku) {
        if (!err) {
          console.log("Liked! " + id);
          ip.likes.push(id);
          ip.save();
          return res.send(200);
        } else {
          console.log(err);
          return res.send(500);
        }
      });
    });
  };

}).call(this);
